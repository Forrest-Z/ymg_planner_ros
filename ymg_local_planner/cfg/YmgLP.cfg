#!/usr/bin/env python
# ymg local Planner configuration

from dynamic_reconfigure.parameter_generator_catkin import ParameterGenerator, double_t, int_t, bool_t
from local_planner_limits import add_generic_localplanner_params

gen = ParameterGenerator()


# This unusual line allows to reuse existing parameter definitions
# that concern all localplanners
add_generic_localplanner_params(gen)


gen.add("sim_time", double_t, 0, "The amount of time to roll trajectories out for in seconds", 1.7, 0)
gen.add("sim_granularity", double_t, 0, "The granularity with which to check for collisions along each trajectory in meters", 0.025, 0)
gen.add("angular_sim_granularity", double_t, 0, "The granularity with which to check for collisions for rotations in radians", 0.1, 0)

gen.add("use_dwa", bool_t, 0, "Use dynamic window approach to constrain sampling velocities to small window.", False)

gen.add("path_tolerance", double_t, 0, "The tolerance between global path and endpoint of simulated local path.", 0.1, 0.0)
gen.add("obstacle_tolerance", int_t, 0, "The maximum cost of the cell which the path can be drawn.", 253, 0, 255)

gen.add("path_distance_bias", double_t, 0, "The weight for the path distance part of the cost function", 32.0, 0.0)
gen.add("goal_distance_bias", double_t, 0, "The weight for the goal distance part of the cost function", 24.0, 0.0)
gen.add("occdist_scale", double_t, 0, "The weight for the obstacle distance part of the cost function", 0.01, 0.0)

gen.add("local_goal_distance", double_t, 0, "The distance of the local goal which is calculated from global plan", 2.0, 0.0)

gen.add("forward_point_dist", double_t, 0, "The distance from the center point of the robot to place an additional scoring point, in meters", 0.325)
gen.add("forward_point_dist_obstacle", double_t, 0, "The distance from the center point of the robot to place an additional scoring point for calc obstacle costs, in meters", 0.2)

gen.add("scaling_speed", double_t, 0, "The absolute value of the velocity at which to start scaling the robot's footprint, in m/s", 0.25, 0)
gen.add("max_scaling_factor", double_t, 0, "The maximum factor to scale the robot's footprint by", 1.5, 0)

gen.add("vx_samples", int_t, 0, "The number of samples to use when exploring the x velocity space", 3, 1, 100)
gen.add("vy_samples", int_t, 0, "The number of samples to use when exploring the y velocity space", 0, 1, 100)
gen.add("vth_samples", int_t, 0, "The number of samples to use when exploring the theta velocity space", 21, 1, 100)

gen.add("restore_defaults", bool_t, 0, "Restore to the original configuration.", False)

exit(gen.generate("ymglp", "ymg_local_planner", "YmgLP"))
